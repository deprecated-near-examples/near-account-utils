#!/usr/bin/env node

/*

What is this?
-------------

Generate a report of decoded state stored on an account

  Usage:

  yarn storage <account>


Sample Report
-------------


  Storage Report for dev-1588779149087

╔═════════════════╤══════════════════════════════════════════════════════════════════════════════════╗
║             key │ value                                                                            ║
╟─────────────────┼──────────────────────────────────────────────────────────────────────────────────╢
║            m::0 │ {                                                                                ║
║                 │   "premium": true,                                                               ║
║                 │   "sender": "sherif.testnet",                                                    ║
║                 │   "text": "hello there, here's 1 NEAR for you"                                   ║
║                 │ }                                                                                ║
╟─────────────────┼──────────────────────────────────────────────────────────────────────────────────╢
║            m::1 │ {                                                                                ║
║                 │   "premium": false,                                                              ║
║                 │   "sender": "sherif.testnet",                                                    ║
║                 │   "text": "and here's a message that's not premium"                              ║
║                 │ }                                                                                ║
╟─────────────────┼──────────────────────────────────────────────────────────────────────────────────╢
║            m::2 │ {                                                                                ║
║                 │   "premium": false,                                                              ║
║                 │   "sender": "sherif.testnet",                                                    ║
║                 │   "text": "one more?"                                                            ║
║                 │ }                                                                                ║
╟─────────────────┼──────────────────────────────────────────────────────────────────────────────────╢
║           m:len │ 3                                                                                ║
╚═════════════════╧══════════════════════════════════════════════════════════════════════════════════╝

*/

const path = require("path");

const { table } = require("table");
const chalk = require("chalk");

const chardet = require('chardet'); // character encoding detection

const { fetchStorage } = require("../lib/utils");

const account = process.argv.pop();
// const account = "dev-1588779149087";

if (account === __filename) {
  console.log(
    chalk`{bold Storage Report: {red Please provide an account name}}`
  );
  console.log(`
  Usage:

  yarn storage <account>
  `);
  process.exit(0);
}

(async () => {
  const network = process.env.NEAR_ENV || "testnet";
  const storage = await fetchStorage(account, network);

  if (Object.keys(storage).length == 0) {
    console.log(
      chalk`{bold Storage Report for {yellow ${account}}: {red Invalid account}}`
    );
    return;
  }

  const values = JSON.parse(storage).result.values;

  if (values.length > 0) {
    console.log(chalk`
    {bold Storage Report for {yellow ${account}}}
    `);

    let header = ["key", "value"].map((el) => chalk.bold(el));

    let data = [];
    data.push(header);

    for (const entry of values) {
      row = [];
      row.push(transcode(entry.key));
      row.push(format(transcode(entry.value)));
      data.push(row);
    }

    const output = table(data, {
      columnCount: 2,
      columns: {
        0: { width: 30, alignment: "right" },
        1: { width: 80, alignment: "left" },
      },
    });

    console.log(output);
  } else {
    console.log(
      chalk`{bold Storage Report for {yellow ${account}}: {red No records found}}`
    );
  }
})();

function convert_unprintable_characters(str, hex) {
  var result = [];
  var replaced = false;
  for (var n = 0, l = str.length; n < l; n++) {
    code = str.charCodeAt(n);
    if (code < 32 || code == 127 || code == 255 || code == 65533) {
      var char = "[0x" + hex.substr(n * 2, 2) + "]";
      replaced = true;
    } else {
      var char = str[n]
    }
    result.push(char);
  }
  return (replaced ? chalk`{yellow {bold NOTICE: Non-printable bytes are shown with [0xNN]}}\n\n` : "") + result.join("");
}

function transcode(data, source = "base64", target = "utf8") {
  const ENCODINGS = [
    "ascii", // For 7 bit ASCII data only. This encoding method is very fast, and will strip the high bit if set.
    "base64", // An efficient (power of 2) and safe (over the wire) encoding format used to move data around the interwebs
    "binary", // A way of encoding raw binary data into strings by using only the first 8 bits of each character.
    "ucs2", // 2-bytes, little endian encoded Unicode characters. It can encode only BMP(Basic Multilingual Plane, U+0000 - U+FFFF).
    "utf8", // Multi byte encoded Unicode characters. Many web pages and other document formats use UTF-8.
  ];

  if(!ENCODINGS.includes(source) || !ENCODINGS.includes(target)) {
    throw new Error(`Unsupported transcoding: ${source} --> ${target}`)
  }

  hex = Buffer.from(data, source).toString("hex")
  return convert_unprintable_characters(Buffer.from(data, source).toString(target), hex);
}

function format(text) {
  try {
    return JSON.stringify(JSON.parse(text), null, 2);
  } catch (error) {
    return text
    // const encoding = chardet.detect(Buffer.from(text));
    // const analysis = chardet.analyse(Buffer.from(text))

    // console.log(chalk`{bold.red Could not decode some data in storage}`)
    // // console.log()
    // // console.log(chalk`{bold It could be one of these encodings:}`)
    // // console.log(analysis)
    // console.log(`
    //   (found ${encoding} data)

    //   ${text} <--> ${transcode(text, 'binary', 'utf8')}
    //   ${text} <--> ${transcode(text, 'utf8', 'base64')}
    //   `
    // );
  }
}
